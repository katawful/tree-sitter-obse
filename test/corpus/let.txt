==============
Let assignment
==============
scn scriptname
begin block
  let x := y
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      let: (let_statement
        left: (operands
          plain: (identifier))
        assignment: (assignment)
        right: (operands
          plain: (identifier)))))

==============
Let expression
==============
scn scriptname
begin block
  let iTemp := ((iSpellSize) - (Rand 0 iSpellSize))
  let x := y + x
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      let: (let_statement
        left: (operands
          plain: (identifier))
        assignment: (assignment)
        (operands
          plain: (identifier))
          (binary_operator)
          (operands
            argumentative: (argumentative
              function: (identifier)
              argument: (literal)
              argument: (identifier))))
      let: (let_statement
        left: (operands
          plain: (identifier))
        assignment: (assignment)
        (operands
          plain: (identifier))
          (binary_operator)
          (operands
            plain: (identifier)))))

============
Let compound
============
scn scriptname
begin block
  let x += 1
  let x -= 1
  let x *= 1
  let x /= 1
  let x ^= 1
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      let: (let_statement
        left: (operands
          plain: (identifier))
        compound: (compound_assignment)
        right: (operands
          literal: (literal)))
      let: (let_statement
        left: (operands
          plain: (identifier))
        compound: (compound_assignment)
        right: (operands
          literal: (literal)))
      let: (let_statement
        left: (operands
          plain: (identifier))
        compound: (compound_assignment)
        right: (operands
          literal: (literal)))
      let: (let_statement
        left: (operands
              plain: (identifier))
        compound: (compound_assignment)
        right: (operands
          literal: (literal)))
      let: (let_statement
        left: (operands
          plain: (identifier))
        compound: (compound_assignment)
        right: (operands
          literal: (literal)))))
