==============
Let assignment
==============
scn scriptname
begin block
  let x := y
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      let: (let_statement
        plain: (identifier)
        assignment: (assignment)
        plain: (identifier))))

==============
Let expression
==============
scn scriptname
begin block
  let iTemp := ((iSpellSize) - (Rand 0 iSpellSize))
  let x := y + x
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      let: (let_statement
        plain: (identifier)
        assignment: (assignment)
        plain: (identifier)
        (binary_operator)
        plain: (identifier)
        integer: (integer)
        plain: (identifier))
      let: (let_statement
        plain: (identifier)
        assignment: (assignment)
          plain: (identifier)
          (binary_operator)
          plain: (identifier))))

============
Let compound
============
scn scriptname
begin block
  let x += 1
  let x -= 1
  let x *= 1
  let x /= 1
  let x ^= 1
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      let: (let_statement
        plain: (identifier)
        compound: (compound_assignment)
        integer: (integer))
      let: (let_statement
        plain: (identifier)
        compound: (compound_assignment)
        integer: (integer))
      let: (let_statement
        plain: (identifier)
        compound: (compound_assignment)
        integer: (integer))
      let: (let_statement
        plain: (identifier)
        compound: (compound_assignment)
        integer: (integer))
      let: (let_statement
        plain: (identifier)
        compound: (compound_assignment)
        integer: (integer))))
