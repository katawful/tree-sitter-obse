===============
Unparenthesized
===============
scn scriptname
begin block
  eval x || y
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
      binary_expression: (binary_expr
        (operands
          plain: (identifier))
        (binary_operator)
        (operands
          plain: (identifier))))))


=============
Parenthesized
=============
scn scriptname
begin block
  eval (x || y)
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
      paren_binary_expression: (parenthesized_binary_expr
        (operands
          plain: (identifier))
        (binary_operator)
        (operands
          plain: (identifier))))))


=====================
Multiple expressions
=====================
scn scriptname
begin block
  eval x > 2 || array[1] < dot.object + func argu
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
      binary_expression: (binary_expr
        (operands
          plain: (identifier))
        (binary_operator)
        (operands
          literal: (literal))
        (binary_operator)
        (operands
          array_var: (array_variable
            array: (identifier)
            index: (subscript
              key: (literal))))
        (binary_operator)
        (operands
          dot: (dot_object
            left: (identifier)
            right: (identifier)))
        (binary_operator)
        (operands
          argumentative: (argumentative
            function: (identifier)
            argument: (identifier)))))))

==================================
Parenthesized multiple expressions
==================================
scn scriptname
begin block
  eval (x > 2 || (array[1] < dot.object) + func argu)
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
      binary_expression: (binary_expr
        (operands
          plain: (identifier))
        (binary_operator)
        (operands
          literal: (literal))
        (binary_operator)
        (operands
          array_var: (array_variable
            array: (identifier)
            index: (subscript
              key: (literal))))
        (binary_operator)
        (operands
          dot: (dot_object
            left: (identifier)
            right: (identifier)))
        (binary_operator)
        (operands
          argumentative: (argumentative
            function: (identifier)
            argument: (identifier)))))))
