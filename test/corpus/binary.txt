===============
Unparenthesized
===============
scn scriptname
begin block
  eval x || y
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
        plain: (identifier)
        (binary_operator)
        plain: (identifier))))


=============
Parenthesized
=============
scn scriptname
begin block
  eval (x || y)
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
        plain: (identifier)
        (binary_operator)
        plain: (identifier))))


=====================
Multiple expressions
=====================
scn scriptname
begin block
  eval x > 2 || array[1] < dot.object + func argu
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
        plain: (identifier)
        (binary_operator)
        literal: (literal)
        (binary_operator)
        array_var: (array_variable
          array: (identifier)
          key: (subscript
            index: (literal)))
        (binary_operator)
        dot: (dot_object
          left: (identifier)
          right: (identifier))
        (binary_operator)
        plain: (identifier)
        plain: (identifier))))

==================================
Parenthesized multiple expressions
==================================
scn scriptname
begin block
  eval ((x < 2) || array[1]) + 2 && (func argu) - (quest.variable)
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
          plain: (identifier)
          (binary_operator)
          literal: (literal)
          (binary_operator)
          array_var: (array_variable
            array: (identifier)
            key: (subscript
              index: (literal)))
          (binary_operator)
          literal: (literal)
          (binary_operator)
          plain: (identifier)
          plain: (identifier)
          (binary_operator)
            dot: (dot_object
              left: (identifier)
              right: (identifier)))))
