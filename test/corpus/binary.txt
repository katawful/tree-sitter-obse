===============
Unparenthesized
===============
scn scriptname
begin block
  eval x || y
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
        (operands
          plain: (identifier))
        (binary_operator)
        (operands
          plain: (identifier)))))


=============
Parenthesized
=============
scn scriptname
begin block
  eval (x || y)
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
        (operands
          plain: (identifier))
        (binary_operator)
        (operands
          plain: (identifier)))))


=====================
Multiple expressions
=====================
scn scriptname
begin block
  eval x > 2 || array[1] < dot.object + func argu
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
        (operands
          plain: (identifier))
        (binary_operator)
        (operands
          literal: (literal))
        (binary_operator)
        (operands
          array_var: (array_variable
            array: (identifier)
            index: (subscript
              key: (literal))))
        (binary_operator)
        (operands
          dot: (dot_object
            left: (identifier)
            right: (identifier)))
        (binary_operator)
        (operands
          function: (identifier)
          argument: (identifier)))))

==================================
Parenthesized multiple expressions
==================================
scn scriptname
begin block
  eval ((x < 2) || array[1]) + 2 && (func argu) - (quest.variable)
end
---
(script_file
  script_name: (script_name
    declaration: (script_declarator)
    script_name: (identifier))
    block_mode: (block
      block_type: (identifier)
      eval: (eval
          (operands
            plain: (identifier))
          (binary_operator)
          (operands
            literal: (literal))
          (binary_operator)
          (operands
            array_var: (array_variable
              array: (identifier)
              index: (subscript
                key: (literal))))
          (binary_operator)
          (operands
            literal: (literal))
          (binary_operator)
          (operands
            function: (identifier)
            argument: (identifier))
          (binary_operator)
            (operands
              dot: (dot_object
                left: (identifier)
                right: (identifier))))))
